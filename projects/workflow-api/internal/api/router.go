package api

import (
	"comfyui-api-service/comfyui"
	// "comfyui-api-service/internal/auth" // Uncommented for use
	"comfyui-api-service/internal/config"
	_ "comfyui-api-service/internal/docs" // Import generated docs
	"net/http"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// SetupRouter configures the Gin router with middleware and routes.
func SetupRouter(cfg *config.Config, comfyClient *comfyui.Client) *gin.Engine {
	gin.SetMode(cfg.GinMode)
	router := gin.Default() // Includes logger and recovery middleware

	// Health Check Endpoint (optional, doesn't need auth)
	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "UP"})
	})

	// Swagger Endpoint (doesn't need auth)
	// The security definitions for Swagger UI authorization are generated by 'swag init'
	// based on annotations in main.go and are present in internal/docs/swagger.yaml.
	// ginSwagger.PersistAuthorization(true) allows saving the auth token in the UI.
	swaggerURL := ginSwagger.URL("/swagger/doc.json") // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, swaggerURL,
		ginSwagger.PersistAuthorization(true), // Allow saving auth token in Swagger UI
	))

	// Create API handler instance
	apiHandler := NewAPIHandler(comfyClient)

	// API v1 Group with Authentication Middleware
	v1 := router.Group("/api/v1")
	// Authentication Middleware is now enabled
	// v1.Use(auth.AuthMiddleware(cfg.GoogleClientID, cfg.AllowedAuthDomain))
	{
		v1.POST("/queue_prompt", apiHandler.QueuePrompt)
		v1.GET("/history/:prompt_id", apiHandler.GetHistory)
		v1.GET("/image", apiHandler.GetImage)
		v1.POST("/upload_image", apiHandler.UploadImage)
		// Add other ComfyUI client functions here if needed
	}

	return router
}