# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  - args:
      - "${_WAIT_FOR_TRIGGER}"
    entrypoint: "test/ci-cd/scripts/cloudbuild/wait_for_trigger.sh"
    env:
      - "LOCATION=${LOCATION}"
      - "PROJECT_ID=${PROJECT_ID}"
    id: "Check triggers"
    name: "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/ci-cd/runner:latest"
    waitFor: ["-"]

  - name: "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/ci-cd/runner:latest"
    id: "Validate Kustomize application configurations"
    entrypoint: "bash"
    args:
      - "-e"
      - "-u"
      - "-x"
      - "-c"
      - |
        inf_reference_architecture_dir_path="/workspace/platforms/gke/base/use-cases/inference-ref-arch"
        echo "HUGGING_FACE_TOKEN=dummy-hf-token" >"${inf_reference_architecture_dir_path}/kubernetes-manifests/base/hugging-face-token.env"

        find "${inf_reference_architecture_dir_path}" -name "kustomization.yaml" -print0 | while read -d $'\0' file; do
          kustomize_directory_path="$(dirname "${file}")"
          rendered_kubernetes_manifests_file_path="/tmp/rendered-kustomize.yaml"

          # Basic validation:
          # - Render manifests with Kustomize
          # - Validate manifests with kubectl-validate
          kubectl kustomize "${kustomize_directory_path}" | tee "${rendered_kubernetes_manifests_file_path}"
          kubectl validate "${rendered_kubernetes_manifests_file_path}"
        done
    waitFor:
      - "Check triggers"

  - name: "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/ci-cd/runner:latest"
    id: "Test platforms/gke/base/use-cases/inference-ref-arch scripts"
    entrypoint: "bash"
    args:
      - "-u"
      - "-x"
      - "-c"
      - |
        export NO_COLOR="1"
        export TERM="xterm"
        export TF_CLI_ARGS="-no-color"
        export TF_IN_AUTOMATION="1"

        export ACP_REPO_DIR="/workspace"
        export ACP_PLATFORM_BASE_DIR="/workspace/platforms/gke/base"
        export ACP_PLATFORM_CORE_DIR="/workspace/platforms/gke/base/core"
        export ACP_PLATFORM_USE_CASE_DIR="/workspace/platforms/gke/base/use-cases/inference-ref-arch"

        # Use the truncated BUILD_ID as project suffix.
        # Truncate it at 7 characters as a short Git SHA
        PROJECT_SUFFIX="${BUILD_ID}"
        PROJECT_SUFFIX="$${PROJECT_SUFFIX:0:7}"

        export TF_VAR_platform_default_project_id="${PROJECT_ID}-$${PROJECT_SUFFIX}"
        export TF_VAR_platform_name="${SHORT_SHA}"

        export TF_VAR_iap_domain="${_IAP_DOMAIN}"

        # Create a dedicated project
        export NEW_PROJECT_ID="$${TF_VAR_platform_default_project_id}"
        test/ci-cd/scripts/create_project.sh

        $${ACP_PLATFORM_USE_CASE_DIR}/terraform/deploy.sh

        APPLY_RETURN_CODE=$?
        echo "APPLY_RETURN_CODE=$${APPLY_RETURN_CODE}"

        $${ACP_PLATFORM_USE_CASE_DIR}/terraform/teardown.sh

        # Delete the dedicated project
        export DELETE_PROJECT_ID="$${NEW_PROJECT_ID}"
        test/ci-cd/scripts/delete_project.sh

        if [[ $${APPLY_RETURN_CODE} -ne 0 ]]; then
          exit $${APPLY_RETURN_CODE}
        fi
    waitFor:
      - "Check triggers"

substitutions:
  _DEBUG: "false"
